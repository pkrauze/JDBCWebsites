package com.websites.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.websites.domain.Website;

public class WebsiteServiceImpl implements WebsiteService {
  private Connection connection;
  private String url = "jdbc:hsqldb:hsql://localhost/workdb";
  private String createTableWebsite = "CREATE TABLE Website("
  											+ "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
  											+ "domain VARCHAR(50) NOT NULL, "
  											+ "description VARCHAR(250) NOT NULL, "
  											+ "page_rank INT NOT NULL, "
  											+ "page_authority INT NOT NULL, "
  											+ "domain_authority INT NOT NULL)";
  private PreparedStatement addWebsiteStmt;
  private PreparedStatement getAllWebsitesStmt;
  private PreparedStatement updateWebsiteStmt;
  private PreparedStatement updateWebsiteDomainStmt;
  private PreparedStatement updateWebsiteDescriptionStmt;
  private PreparedStatement updateWebsitePageRankStmt;
  private PreparedStatement updateWebsitePageAuthorityStmt;
  private PreparedStatement updateWebsiteDomainAuthorityStmt;
  private PreparedStatement removeAllWebsitesStmt;
  private PreparedStatement removeWebsiteByIdStmt;
  private PreparedStatement removeWebsiteByDomainStmt;
  private PreparedStatement findByIdStmt;
  private PreparedStatement findByDomainStmt;
  private PreparedStatement findByDescriptionStmt;
  private PreparedStatement findByPageRankStmt;
  private PreparedStatement findByPageAuthorityStmt;
  private PreparedStatement findByDomainAuthorityStmt;
  private Statement statement;

  public WebsiteServiceImpl() {
    openConnection();
    createTable();
    createStatements();
  }

  public boolean createTable() {
    try {
      ResultSet resultSet = connection.getMetaData().getTables(null, null, null, null);
      boolean tableExists = false;
      while (resultSet.next()) {
        if ("Website".equalsIgnoreCase(resultSet.getString("TABLE_NAME"))) {
          tableExists = true;
          break;
        }
      }
      if (!tableExists) {
        statement.executeUpdate(createTableWebsite);
      }
    } catch (SQLException e) {
      e.printStackTrace();
      return false;
    }
    return true;
  }

  public boolean createStatements() {
    try {
      addWebsiteStmt = connection
          .prepareStatement("INSERT INTO Website(domain, description, page_rank, page_authority, domain_authority) VALUES(?, ?, ?, ?, ?)");
      
      getAllWebsitesStmt = connection
          .prepareStatement("SELECT id, domain, description, page_rank, page_authority, domain_authority FROM Website");
      
      updateWebsiteStmt = connection.prepareStatement(
          "UPDATE Website SET id = id, domain = ?, description = ?, page_rank = ?, page_authority = ?, domain_authority = ? WHERE id = ?");
      
      updateWebsiteDomainStmt = connection.prepareStatement(
          "UPDATE Website SET id = id, domain = ?, description = description, page_rank = page_rank, page_authority = page_authority, domain_authority = domain_authority WHERE id = ?");
      
      updateWebsiteDescriptionStmt = connection.prepareStatement(
              "UPDATE Website SET id = id, description = ?, domain = domain, page_rank = page_rank, page_authority = page_authority, domain_authority = domain_authority WHERE id = ?");
      
      updateWebsitePageRankStmt = connection.prepareStatement(
              "UPDATE Website SET id = id, page_rank = ?, domain = doamin, description = description, page_authority = page_authority, domain_authority = domain_authority WHERE id = ?");
      
      updateWebsitePageAuthorityStmt = connection.prepareStatement(
              "UPDATE Website SET id = id, page_authority = ?, domain = domain, description = description, page_rank = page_rank, domain_authority = domain_authority WHERE id = ?");
      
      updateWebsiteDomainAuthorityStmt = connection.prepareStatement(
              "UPDATE Website SET id = id, domain_authority = ?, domain = domain, description = description, page_rank = page_rank, page_authority = page_authority WHERE id = ?");
      
      removeAllWebsitesStmt = connection.prepareStatement("DELETE FROM Website");
      
      removeWebsiteByIdStmt = connection.prepareStatement("DELETE FROM Website WHERE id = ?");
      
      removeWebsiteByDomainStmt = connection.prepareStatement("DELETE FROM Website WHERE domain = ?");
      
      findByIdStmt = connection
          .prepareStatement("SELECT id, domain, description, page_rank, page_authority, domain_authority FROM Website WHERE id = ?");
      
      findByDomainStmt = connection
          .prepareStatement("SELECT id, domain, description, page_rank, page_authority, domain_authority FROM Website WHERE domain = ?");
      
      findByDescriptionStmt = connection
    	  .prepareStatement("SELECT id, domain, description, page_rank, page_authority, domain_authority FROM Website WHERE description LIKE ?");
      
      findByPageRankStmt = connection
    	  .prepareStatement("SELECT id, domain, description, page_rank, page_authority, domain_authority FROM Website WHERE page_rank = ?");
      
      findByPageAuthorityStmt = connection
    	  .prepareStatement("SELECT id, domain, description, page_rank, page_authority, domain_authority FROM Website WHERE page_authority = ?");
      
      findByDomainAuthorityStmt = connection
          .prepareStatement("SELECT id, domain, description, page_rank, page_authority, domain_authority FROM Website WHERE domain_authority = ?");
      
    } catch (SQLException e) {
      e.printStackTrace();
      return false;
    }
    return true;
  }

  public boolean openConnection() {
    try {
      connection = DriverManager.getConnection(url);
      statement = connection.createStatement();
    } catch (SQLException e) {
      e.printStackTrace();
      return false;
    }
    return true;
  }

  public boolean closeConnection() {
    try {
      connection.close();
    } catch (SQLException e) {
      e.printStackTrace();
      return false;
    }
    return true;
  }

  public Connection getConnection() {
    return connection;
  }

  @Override
  public int addWebsite(Website website) {
    int counter = 0;
    try {
      connection.setAutoCommit(false);
      addWebsiteStmt.setString(1, website.getDomain());
      addWebsiteStmt.setString(2, website.getDescription());
      addWebsiteStmt.setInt(3, website.getPage_rank());
      addWebsiteStmt.setInt(4, website.getPage_authority());
      addWebsiteStmt.setInt(5, website.getDomain_authority());
      counter = addWebsiteStmt.executeUpdate();
      connection.commit();
    } catch (SQLException e) {
      try {
        connection.rollback();
      } catch (SQLException ex) {
        ex.printStackTrace();
      }
    } finally {
      try {
        connection.setAutoCommit(true);
      } catch (SQLException e) {
        e.printStackTrace();
      }
    }
    return counter;
  }

  @Override
  public int addAllWebsitesFromList(List<Website> Websites) {
    int counter = 0;
    try {
      connection.setAutoCommit(false);
      for (Website Website : Websites) {
        addWebsiteStmt.setString(1, Website.getDomain());
        addWebsiteStmt.setString(2, Website.getDescription());
        addWebsiteStmt.setInt(3, Website.getPage_rank());
        addWebsiteStmt.setInt(4, Website.getPage_authority());
        addWebsiteStmt.setInt(5, Website.getDomain_authority());
        counter += addWebsiteStmt.executeUpdate();
        connection.commit();
      }
    } catch (SQLException e) {
      try {
        connection.rollback();
      } catch (SQLException ex) {
        ex.printStackTrace();
      }
    } finally {
      try {
        connection.setAutoCommit(true);
      } catch (SQLException e) {
        e.printStackTrace();
      }
    }
    return counter;
  }

  @Override
  public List<Website> getAllWebsites() {
    List<Website> Websites = new ArrayList<Website>();
    try {
      ResultSet resultSet = getAllWebsitesStmt.executeQuery();
      while (resultSet.next()) {
        Website Website = new Website();
        Website.setId(resultSet.getLong("id"));
        Website.setDomain(resultSet.getString("domain"));
        Website.setDescription(resultSet.getString("description"));
        Website.setPage_rank(resultSet.getInt("page_rank"));
        Website.setPage_authority(resultSet.getInt("page_authority"));
        Website.setDomain_authority(resultSet.getInt("domain_authority"));
        Websites.add(Website);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return Websites;
  }

  @Override
  public int updateWebsite(Website Website, String domain, String description, int page_rank, int page_authority, int domain_authority) {
    int counter = 0;
    try {
      updateWebsiteStmt.setString(1, domain);
      updateWebsiteStmt.setString(2, description);
      updateWebsiteStmt.setInt(3, page_rank);
      updateWebsiteStmt.setInt(4, page_authority);
      updateWebsiteStmt.setInt(5, domain_authority);
      updateWebsiteStmt.setLong(6, Website.getId());
      counter = updateWebsiteStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return counter;
  }

  @Override
  public int updateWebsiteDomain(Website Website, String domain) {
    int counter = 0;
    try {
      updateWebsiteDomainStmt.setString(1, domain);
      updateWebsiteDomainStmt.setLong(2, Website.getId());
      counter = updateWebsiteDomainStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return counter;
  }
  
  @Override
  public int updateWebsiteDescription(Website Website, String description) {
    int counter = 0;
    try {
      updateWebsiteDescriptionStmt.setString(1, description);
      updateWebsiteDescriptionStmt.setLong(2, Website.getId());
      counter = updateWebsiteDescriptionStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return counter;
  }
  
  @Override
  public int updateWebsitePageRank(Website Website, int page_rank) {
    int counter = 0;
    try {
      updateWebsitePageRankStmt.setInt(1, page_rank);
      updateWebsitePageRankStmt.setLong(2, Website.getId());
      counter = updateWebsitePageRankStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return counter;
  }
  
  @Override
  public int updateWebsitePageAuthority(Website Website, int page_authority) {
    int counter = 0;
    try {
      updateWebsitePageAuthorityStmt.setInt(1, page_authority);
      updateWebsitePageAuthorityStmt.setLong(2, Website.getId());
      counter = updateWebsitePageAuthorityStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return counter;
  }
  
  @Override
  public int updateWebsiteDomainAuthority(Website Website, int domain_authority) {
    int counter = 0;
    try {
      updateWebsiteDomainAuthorityStmt.setInt(1, domain_authority);
      updateWebsiteDomainAuthorityStmt.setLong(2, Website.getId());
      counter = updateWebsiteDomainAuthorityStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return counter;
  }


  @Override
  public int removeAllWebsites() {
    int counter = 0;
    try {
      counter = removeAllWebsitesStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return counter;
  }

  @Override
  public int removeWebsiteById(long id) {
    int counter = 0;
    try {
      removeWebsiteByIdStmt.setLong(1, id);
      counter = removeWebsiteByIdStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return counter;
  }

  @Override
  public int removeWebsiteByDomain(String domain) {
    int counter = 0;
    try {
      removeWebsiteByDomainStmt.setString(1, domain);
      counter = removeWebsiteByDomainStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return counter;
  }

  @Override
  public Website findById(long id) {
    Website Website = null;
    try {
      findByIdStmt.setLong(1, id);
      ResultSet resultSet = findByIdStmt.executeQuery();
      if (resultSet.next()) {
        String domain = resultSet.getString("domain");
        String description = resultSet.getString("description");
        int page_rank = resultSet.getInt("page_rank");
        int page_authority = resultSet.getInt("page_authority");
        int domain_authority = resultSet.getInt("domain_authority");
        Website = new Website(domain, description, page_rank, page_authority, domain_authority);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return Website;
  }

  @Override
  public Website findByDomain(String domain) {
    Website Website = null;
    try {
      findByDomainStmt.setString(1, domain);
      ResultSet resultSet = findByDomainStmt.executeQuery();
      if (resultSet.next()) {
        String description = resultSet.getString("description");
        int page_rank = resultSet.getInt("page_rank");
        int page_authority = resultSet.getInt("page_authority");
        int domain_authority = resultSet.getInt("domain_authority");
        Website = new Website(domain, description, page_rank, page_authority, domain_authority);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return Website;
  }

  @Override
  public Website findByDescription(String description) {
    Website Website = null;
    try {
      findByDescriptionStmt.setString(1, description);
      ResultSet resultSet = findByDescriptionStmt.executeQuery();
      if (resultSet.next()) {
        String domain = resultSet.getString("domain");
        int page_rank = resultSet.getInt("page_rank");
        int page_authority = resultSet.getInt("page_authority");
        int domain_authority = resultSet.getInt("domain_authority");
        Website = new Website(domain, description, page_rank, page_authority, domain_authority);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return Website;
  }

  @Override
  public Website findByPageRank(int page_rank) {
    Website Website = null;
    try {
      findByPageRankStmt.setInt(1, page_rank);
      ResultSet resultSet = findByPageRankStmt.executeQuery();
      if (resultSet.next()) {
        String domain = resultSet.getString("domain");
        String description = resultSet.getString("description");
        int page_authority = resultSet.getInt("page_authority");
        int domain_authority = resultSet.getInt("domain_authority");
        Website = new Website(domain, description, page_rank, page_authority, domain_authority);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return Website;
  }
  
  @Override
  public Website findByPageAuthority(int page_authority) {
    Website Website = null;
    try {
      findByPageAuthorityStmt.setInt(1, page_authority);
      ResultSet resultSet = findByPageAuthorityStmt.executeQuery();
      if (resultSet.next()) {
        String domain = resultSet.getString("domain");
        String description = resultSet.getString("description");
        int page_rank = resultSet.getInt("page_rank");
        int domain_authority = resultSet.getInt("domain_authority");
        Website = new Website(domain, description, page_rank, page_authority, domain_authority);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return Website;
  }
  
  @Override
  public Website findByDomainAuthority(int domain_authority) {
    Website Website = null;
    try {
      findByDomainAuthorityStmt.setInt(1, domain_authority);
      ResultSet resultSet = findByPageAuthorityStmt.executeQuery();
      if (resultSet.next()) {
        String domain = resultSet.getString("domain");
        String description = resultSet.getString("description");
        int page_rank = resultSet.getInt("page_rank");
        int page_authority = resultSet.getInt("page_authority");
        Website = new Website(domain, description, page_rank, page_authority, domain_authority);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return Website;
  }
}